+ from io import BufferedWriter
+ from tests.test_feedexport import FeedPostProcessedExportsTest
  from typing import (
      Any,
-     BinaryIO,
      Dict,
      List,
+     Optional,
+     Type,
+     Union,
  )


  class Bz2Plugin:
-     def __init__(self, file: BinaryIO, feed_options: Dict[str, Any]) -> None: ...
+     def __init__(
+         self,
+         file: BufferedWriter,
+         feed_options: Union[Dict[str, Optional[Union[str, List[Union[Type[FeedPostProcessedExportsTest.MyPlugin1], str]], bytes, int, Dict[Any, Any]]]], Dict[str, Optional[Union[str, List[str], int, Dict[Any, Any]]]]]
+     ) -> None: ...
      def close(self) -> None: ...
      def write(self, data: bytes) -> int: ...


  class GzipPlugin:
-     def __init__(self, file: BinaryIO, feed_options: Dict[str, Any]) -> None: ...
+     def __init__(
+         self,
+         file: BufferedWriter,
+         feed_options: Union[Dict[str, Optional[Union[str, List[Union[Type[FeedPostProcessedExportsTest.MyPlugin1], str]], bytes, int, Dict[Any, Any]]]], Dict[str, Optional[Union[str, List[str], int, Dict[Any, Any]]]]]
+     ) -> None: ...
      def close(self) -> None: ...
      def write(self, data: bytes) -> int: ...


  class LZMAPlugin:
-     def __init__(self, file: BinaryIO, feed_options: Dict[str, Any]) -> None: ...
+     def __init__(
+         self,
+         file: BufferedWriter,
+         feed_options: Union[Dict[str, Optional[Union[str, List[Union[Type[FeedPostProcessedExportsTest.MyPlugin1], str]], bytes, int, Dict[Any, Any]]]], Dict[str, Optional[Union[str, List[str], List[Dict[str, int]], int, Dict[Any, Any]]]], Dict[str, Optional[Union[str, List[str], int, Dict[Any, Any]]]]]
+     ) -> None: ...
      def close(self) -> None: ...
      def write(self, data: bytes) -> int: ...


  class PostProcessingManager:
-     def __init__(self, plugins: List[Any], file: BinaryIO, feed_options: Dict[str, Any]) -> None: ...
+     def __init__(
+         self,
+         plugins: List[Union[Type[FeedPostProcessedExportsTest.MyPlugin1], str]],
+         file: BufferedWriter,
+         feed_options: Union[Dict[str, Optional[Union[str, List[Union[Type[FeedPostProcessedExportsTest.MyPlugin1], str]], bytes, int, Dict[Any, Any]]]], Dict[str, Optional[Union[str, List[str], List[Dict[str, int]], int, Dict[Any, Any]]]], Dict[str, Optional[Union[str, List[Type[FeedPostProcessedExportsTest.MyPlugin1]], bytes, int, Dict[Any, Any]]]], Dict[str, Optional[Union[str, List[str], int, Dict[Any, Any]]]], Dict[str, Optional[Union[str, List[Type[FeedPostProcessedExportsTest.MyPlugin1]], int, Dict[Any, Any]]]]]
+     ) -> None: ...
-     def _get_head_plugin(self) -> Any: ...
?                          -----------------
+     def _get_head_plugin(
-     def _load_plugins(self, plugins: List[Any]) -> List[Any]: ...
+         self
+     ) -> Union[Bz2Plugin, GzipPlugin, LZMAPlugin, FeedPostProcessedExportsTest.MyPlugin1]: ...
+     def _load_plugins(
+         self,
+         plugins: List[Union[Type[FeedPostProcessedExportsTest.MyPlugin1], str]]
+     ) -> List[Union[Type[Bz2Plugin], Type[LZMAPlugin], Type[FeedPostProcessedExportsTest.MyPlugin1], Type[GzipPlugin]]]: ...
      def close(self) -> None: ...
      def writable(self) -> bool: ...
      def write(self, data: bytes) -> int: ...
