  from _asyncio import Future
+ from collections import deque
  from scrapy.http.request import Request
  from scrapy.http.response import Response
  from scrapy.item import Item
  from scrapy.spiders import Spider
+ from scrapy.utils.python import MutableChain
  from tests.test_engine import AttrsItem
  from twisted.internet.defer import (
      Deferred,
      DeferredList,
  )
  from twisted.python.failure import Failure
  from typing import (
      Any,
      Callable,
-     Coroutine,
      Dict,
-     Generator,
-     Iterable,
      Iterator,
      List,
      Optional,
      Union,
  )
  from unittest.mock import MagicMock


- def deferred_f_from_coro_f(coro_f: Callable[..., Coroutine]) -> Callable: ...
?                                            ----------------
+ def deferred_f_from_coro_f(coro_f: Callable) -> Callable: ...


  def deferred_from_coro(
      o: Optional[Union[Dict[str, int], Deferred, Request, int, Response]]
- ) -> Any: ...
+ ) -> Optional[Union[Dict[str, int], Deferred, Request, int, Response]]: ...


- def iter_errback(iterable: Iterable, errback: Callable, *a, **kw) -> Generator: ...
+ def iter_errback(
+     iterable: Union[MutableChain, Iterator[Any]],
+     errback: Callable,
+     *a,
+     **kw
+ ) -> Iterator[Union[Dict[str, int], Dict[str, str], Request, int, AttrsItem, Dict[str, List[Union[Any, str]]], Dict[str, List[str]], Item, Dict[Any, Any]]]: ...


  def maybe_deferred_to_future(
      d: Deferred
- ) -> Union[Deferred, Future]: ...
?                    --------
+ ) -> Union[Future, Deferred]: ...
?            ++++++++


- def parallel(iterable: Iterable, count: int, callable: Callable, *args, **named) -> DeferredList: ...
+ def parallel(
+     iterable: Iterator[Any],
+     count: int,
+     callable: Callable,
+     *args,
+     **named
+ ) -> DeferredList: ...


  def process_chain(
-     callbacks: Iterable[Callable],
+     callbacks: Union[List[Callable], deque],
      input: Union[Dict[str, int], Iterator[Any], Item, Dict[str, str], Dict[Any, Any], AttrsItem, Dict[str, List[Union[Any, str]]], Dict[str, List[str]], str, List[Any]],
      *a,
      **kw
  ) -> Deferred: ...


  def process_chain_both(
-     callbacks: Iterable[Callable],
?                ^ ------
+     callbacks: List[Callable],
?                ^^^
-     errbacks: Iterable[Callable],
?               ^ ^^ - -
+     errbacks: List[Optional[Callable]],
?               ^^^ ^^^^^^^            +
      input: Union[Failure, str],
      *a,
      **kw
  ) -> Deferred: ...


  def process_parallel(
-     callbacks: Iterable[Callable],
+     callbacks: Union[List[Callable], deque],
      input: Union[str, Spider],
      *a,
      **kw
- ) -> Deferred: ...
+ ) -> DeferredList: ...
?              ++++
