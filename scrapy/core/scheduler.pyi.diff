  from scrapy.crawler import Crawler
  from scrapy.http.request import Request
  from scrapy.pqueues import (
      DownloaderAwarePriorityQueue,
      ScrapyPriorityQueue,
  )
  from scrapy.spiders import Spider
  from tests.test_scheduler_base import (
      MinimalScheduler,
      SimpleScheduler,
  )
- from twisted.internet.defer import Deferred
  from typing import (
+     Any,
+     Dict,
+     List,
      Optional,
      Type,
      Union,
  )


  class BaseScheduler:
-     def close(self, reason: str) -> Optional[Deferred]: ...
?                                     ^^^^  ---- -------
+     def close(self, reason: str) -> None: ...
?                                     ^
      def enqueue_request(self, request: Request) -> bool: ...
      def has_pending_requests(self) -> bool: ...
      def next_request(self) -> Optional[Request]: ...
-     def open(self, spider: Spider) -> Optional[Deferred]: ...
?                                       ^^^^  ---- -------
+     def open(self, spider: Spider) -> None: ...
?                                       ^


  class Scheduler:
      def __len__(self) -> int: ...
      def _dq(self) -> Union[ScrapyPriorityQueue, DownloaderAwarePriorityQueue]: ...
      def _dqdir(self, jobdir: Optional[str]) -> Optional[str]: ...
      def _dqpop(self) -> Optional[Request]: ...
      def _dqpush(self, request: Request) -> bool: ...
      def _mq(self) -> Union[ScrapyPriorityQueue, DownloaderAwarePriorityQueue]: ...
      def _mqpush(self, request: Request) -> None: ...
-     def _read_dqs_state(self, dqdir: str) -> list: ...
?                                              ^
+     def _read_dqs_state(self, dqdir: str) -> List[Any]: ...
?                                              ^   +++++
-     def _write_dqs_state(self, dqdir: str, state: list) -> None: ...
+     def _write_dqs_state(
+         self,
+         dqdir: str,
+         state: Union[Dict[Any, Any], List[Any], List[int], Dict[str, List[int]]]
+     ) -> None: ...
-     def close(self, reason: str) -> Optional[Deferred]: ...
?                                     ^^^^  ---- -------
+     def close(self, reason: str) -> None: ...
?                                     ^
      def enqueue_request(self, request: Request) -> bool: ...
      @classmethod
-     def from_crawler(cls: Type[~SchedulerTV], crawler: Crawler) -> SchedulerTV: ...
?                                                                             --
+     def from_crawler(cls: Type[~SchedulerTV], crawler: Crawler) -> Scheduler: ...
      def has_pending_requests(self) -> bool: ...
      def next_request(self) -> Optional[Request]: ...
-     def open(self, spider: Spider) -> Optional[Deferred]: ...
?                                       ^^^^  ---- -------
+     def open(self, spider: Spider) -> None: ...
?                                       ^
